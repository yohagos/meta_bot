@use 'sass:map';
@use '@angular/material' as mat;

$_palettes: (
  primary: (
    0: #000000,
    10: #002108,
    20: #003913,
    25: #004619,
    30: #00531f,
    35: #006026,
    40: #006e2c,
    50: #008a39,
    60: #2ea550,
    70: #4ec168,
    80: #6bdd80,
    90: #88fb9a,
    95: #c6ffc7,
    98: #ebffe7,
    99: #f6fff1,
    100: #ffffff,
  ),
  secondary: (
    0: #000000,
    10: #001946,
    20: #002c70,
    25: #003786,
    30: #174392,
    35: #274f9e,
    40: #365bab,
    50: #5174c6,
    60: #6b8ee2,
    70: #86a9ff,
    80: #b1c6ff,
    90: #d9e2ff,
    95: #eef0ff,
    98: #faf8ff,
    99: #fefbff,
    100: #ffffff,
  ),
  tertiary: (
    0: #000000,
    10: #360f00,
    20: #591d00,
    25: #6a2603,
    30: #79310d,
    35: #883c18,
    40: #974723,
    50: #b65f39,
    60: #d5784f,
    70: #f59167,
    80: #ffb598,
    90: #ffdbcd,
    95: #ffede7,
    98: #fff8f6,
    99: #fffbff,
    100: #ffffff,
  ),
  neutral: (
    0: #000000,
    10: #1a1b25,
    20: #2f303b,
    25: #3a3b46,
    30: #454652,
    35: #51515e,
    40: #5d5d6a,
    50: #767683,
    60: #90909d,
    70: #aaaab8,
    80: #c6c5d4,
    90: #e2e1f0,
    95: #f1effe,
    98: #fbf8ff,
    99: #fffbff,
    100: #ffffff,
    4: #0c0d17,
    6: #11131d,
    12: #1e1f29,
    17: #282934,
    22: #33343f,
    24: #373844,
    87: #dad9e7,
    92: #e8e7f6,
    94: #eeecfb,
    96: #f4f2ff,
  ),
  neutral-variant: (
    0: #000000,
    10: #131e14,
    20: #283328,
    25: #333e33,
    30: #3e4a3e,
    35: #4a5549,
    40: #566254,
    50: #6e7a6c,
    60: #889485,
    70: #a2af9f,
    80: #bdcaba,
    90: #d9e6d5,
    95: #e7f4e3,
    98: #f0fdec,
    99: #f6fff1,
    100: #ffffff,
  ),
  error: (
    0: #000000,
    10: #410002,
    20: #690005,
    25: #7e0007,
    30: #93000a,
    35: #a80710,
    40: #ba1a1a,
    50: #de3730,
    60: #ff5449,
    70: #ff897d,
    80: #ffb4ab,
    90: #ffdad6,
    95: #ffedea,
    98: #fff8f7,
    99: #fffbff,
    100: #ffffff,
  ),
);

$_rest: (
  secondary: map.get($_palettes, secondary),
  neutral: map.get($_palettes, neutral),
  neutral-variant: map.get($_palettes,  neutral-variant),
  error: map.get($_palettes, error),
);

$primary: map.merge(map.get($_palettes, primary), $_rest);
$tertiary: map.merge(map.get($_palettes, tertiary), $_rest);

$light-theme: mat.define-theme((
  color: (
    theme-type: light,
    primary: $primary,
    tertiary: $tertiary,
  ),
  density: (
    scale: 0,
  )
));

$dark-theme: mat.define-theme((
  color: (
    theme-type: dark,
    primary: $primary,
    tertiary: $tertiary,
  ),
  density: (
    scale: 0,
  )
));

@mixin themeComponents($theme, $allComponentColors) {
  @if($allComponentColors){
    @include mat.all-component-colors($theme);
  }

  .primary {
    @include mat.button-color($theme, $color-variant: primary);
  }
}

@mixin materialRoleColorToVariable($theme){
  --primary: #{mat.get-theme-color($theme, primary)};
  --on-primary: #{mat.get-theme-color($theme, on-primary)};
  --primary-container: #{mat.get-theme-color($theme, primary-container)};
  --on-primary-container: #{mat.get-theme-color($theme, on-primary-container)};
  --primary-fixed: #{mat.get-theme-color($theme, primary-fixed)};
  --primary-fixed-dim: #{mat.get-theme-color($theme, primary-fixed-dim)};
  --on-primary-fixed: #{mat.get-theme-color($theme, on-primary-fixed)};
  --on-primary-fixed-variant: #{mat.get-theme-color($theme, on-primary-fixed-variant)};
  --secondary: #{mat.get-theme-color($theme, secondary)};
  --on-secondary: #{mat.get-theme-color($theme, on-secondary)};
  --secondary-container: #{mat.get-theme-color($theme, secondary-container)};
  --on-secondary-container: #{mat.get-theme-color($theme, on-secondary-container)};
  --secondary-fixed: #{mat.get-theme-color($theme, secondary-fixed)};
  --secondary-fixed-dim: #{mat.get-theme-color($theme, secondary-fixed-dim)};
  --on-secondary-fixed: #{mat.get-theme-color($theme, on-secondary-fixed)};
  --on-secondary-fixed-variant: #{mat.get-theme-color($theme, on-secondary-fixed-variant)};
  --tertiary: #{mat.get-theme-color($theme, tertiary)};
  --on-tertiary: #{mat.get-theme-color($theme, on-tertiary)};
  --tertiary-container: #{mat.get-theme-color($theme, tertiary-container)};
  --on-tertiary-container: #{mat.get-theme-color($theme, on-tertiary-container)};
  --tertiary-fixed: #{mat.get-theme-color($theme, tertiary-fixed)};
  --tertiary-fixed-dim: #{mat.get-theme-color($theme, tertiary-fixed-dim)};
  --on-tertiary-fixed: #{mat.get-theme-color($theme, on-tertiary-fixed)};
  --on-tertiary-fixed-variant: #{mat.get-theme-color($theme, on-tertiary-fixed-variant)};
  --error: #{mat.get-theme-color($theme, error)};
  --on-error: #{mat.get-theme-color($theme, on-error)};
  --error-container: #{mat.get-theme-color($theme, error-container)};
  --on-error-container: #{mat.get-theme-color($theme, on-error-container)};
  --surface-dim: #{mat.get-theme-color($theme, surface-dim)};
  --surface: #{mat.get-theme-color($theme, surface)};
  --surface-bright: #{mat.get-theme-color($theme, surface-bright)};
  --surface-container-lowest: #{mat.get-theme-color($theme, surface-container-lowest)};
  --surface-container-low: #{mat.get-theme-color($theme, surface-container-low)};
  --surface-container: #{mat.get-theme-color($theme, surface-container)};
  --surface-container-high: #{mat.get-theme-color($theme, surface-container-high)};
  --surface-container-highest: #{mat.get-theme-color($theme, surface-container-highest)};
  --on-surface: #{mat.get-theme-color($theme, on-surface)};
  --on-surface-variant: #{mat.get-theme-color($theme, on-surface-variant)};
  --outline: #{mat.get-theme-color($theme, outline)};
  --outline-variant: #{mat.get-theme-color($theme, outline-variant)};
  --inverse-surface: #{mat.get-theme-color($theme, inverse-surface)};
  --inverse-on-surface: #{mat.get-theme-color($theme, inverse-on-surface)};
  --inverse-primary: #{mat.get-theme-color($theme, inverse-primary)};
  --scrim: #{mat.get-theme-color($theme, scrim)};
  --shadow: #{mat.get-theme-color($theme, shadow)};
}


:root {
  @include mat.all-component-themes($dark-theme);
  @include themeComponents($dark-theme, false);
  @include materialRoleColorToVariable($dark-theme);
}

.light {
  @include themeComponents($light-theme, true);
  @include materialRoleColorToVariable($light-theme);
}


@function _high-contrast-value($light, $dark, $theme-type) {
  @if ($theme-type == light) {
    @return $light;
  }
  @if ($theme-type == dark) {
    @return $dark;
  }
  @if ($theme-type == color-scheme) {
    @return light-dark(#{$light}, #{$dark});
  }

  @error 'Unknown theme-type #{$theme-type}. Expected light, dark, or color-scheme';
}

@mixin high-contrast-overrides($theme-type) {
  @include mat.theme-overrides((
    primary: _high-contrast-value(#003411, #c2ffc4, $theme-type),
    on-primary: _high-contrast-value(#ffffff, #000000, $theme-type),
    primary-container: _high-contrast-value(#005521, #67d97d, $theme-type),
    on-primary-container: _high-contrast-value(#ffffff, #000f03, $theme-type),
    inverse-primary: _high-contrast-value(#6bdd80, #005420, $theme-type),
    primary-fixed: _high-contrast-value(#005521, #88fb9a, $theme-type),
    primary-fixed-dim: _high-contrast-value(#003c15, #6bdd80, $theme-type),
    on-primary-fixed: _high-contrast-value(#ffffff, #000000, $theme-type),
    on-primary-fixed-variant: _high-contrast-value(#ffffff, #001504, $theme-type),
    secondary: _high-contrast-value(#002867, #edefff, $theme-type),
    on-secondary: _high-contrast-value(#ffffff, #000000, $theme-type),
    secondary-container: _high-contrast-value(#1b4595, #abc2ff, $theme-type),
    on-secondary-container: _high-contrast-value(#ffffff, #000a25, $theme-type),
    secondary-fixed: _high-contrast-value(#1b4595, #d9e2ff, $theme-type),
    secondary-fixed-dim: _high-contrast-value(#002e74, #b1c6ff, $theme-type),
    on-secondary-fixed: _high-contrast-value(#ffffff, #000000, $theme-type),
    on-secondary-fixed-variant: _high-contrast-value(#ffffff, #000f31, $theme-type),
    tertiary: _high-contrast-value(#521a00, #ffece6, $theme-type),
    on-tertiary: _high-contrast-value(#ffffff, #000000, $theme-type),
    tertiary-container: _high-contrast-value(#7c3310, #ffb08f, $theme-type),
    on-tertiary-container: _high-contrast-value(#ffffff, #1c0500, $theme-type),
    tertiary-fixed: _high-contrast-value(#7c3310, #ffdbcd, $theme-type),
    tertiary-fixed-dim: _high-contrast-value(#5d1e00, #ffb598, $theme-type),
    on-tertiary-fixed: _high-contrast-value(#ffffff, #000000, $theme-type),
    on-tertiary-fixed-variant: _high-contrast-value(#ffffff, #250800, $theme-type),
    background: _high-contrast-value(#fbf8ff, #11131d, $theme-type),
    on-background: _high-contrast-value(#1a1b25, #e2e1f0, $theme-type),
    surface: _high-contrast-value(#fbf8ff, #11131d, $theme-type),
    surface-dim: _high-contrast-value(#b8b7c6, #11131d, $theme-type),
    surface-bright: _high-contrast-value(#fbf8ff, #4e4f5b, $theme-type),
    surface-container-lowest: _high-contrast-value(#ffffff, #000000, $theme-type),
    surface-container: _high-contrast-value(#e2e1f0, #2f303b, $theme-type),
    surface-container-high: _high-contrast-value(#d4d3e2, #3a3b46, $theme-type),
    surface-container-highest: _high-contrast-value(#c6c5d4, #454652, $theme-type),
    on-surface: _high-contrast-value(#000000, #ffffff, $theme-type),
    shadow: _high-contrast-value(#000000, #000000, $theme-type),
    scrim: _high-contrast-value(#000000, #000000, $theme-type),
    surface-tint: _high-contrast-value(#006e2c, #6bdd80, $theme-type),
    inverse-surface: _high-contrast-value(#2f303b, #e2e1f0, $theme-type),
    inverse-on-surface: _high-contrast-value(#ffffff, #000000, $theme-type),
    outline: _high-contrast-value(#242f24, #e7f4e3, $theme-type),
    outline-variant: _high-contrast-value(#414c40, #b9c6b6, $theme-type),
    error: _high-contrast-value(#600004, #ffece9, $theme-type),
    on-error: _high-contrast-value(#ffffff, #000000, $theme-type),
    error-container: _high-contrast-value(#98000a, #ffaea4, $theme-type),
    on-error-container: _high-contrast-value(#ffffff, #220001, $theme-type),
    surface-variant: _high-contrast-value(#d9e6d5, #3e4a3e, $theme-type),
    on-surface-variant: _high-contrast-value(#000000, #ffffff, $theme-type),
  ))
 }
